@page
@model DeskMotion.Pages.OfficesPlanModel
@{
	ViewData["Title"] = "Office Plan";
}

<head>
	<style>
		#container {
			display: flex;
			flex-wrap: wrap;
			margin-top: 2rem;
			justify-content: center;
			background-color: #555a7a;
			color: #52f700;
			border-color: black;
			border-width: 30px;
			border-style: solid;
			border-radius: 10px;
		}

		#canvasContainer {
			position: relative;
			display: flex;
			width: 800px;
			height: 500px;
		}

		canvas {
			position: absolute;
			left: 0;
			top: 0;
		}

		#backgroundCanvas {
			z-index: 1;
			border-color: black;
			border-width: 2px;
			border-style: solid;
			border-radius: 10px;
		}

		#foregroundCanvas {
			z-index: 2;
		}

		#iconBar {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			width: 100px;
			margin-left: 10px;
		}

			#iconBar img {
				width: 100%;
				height: 100%;
			}

		@@media (max-width: 500px) {
			#container

		{
			flex-direction: column;
		}

		}
	</style>
</head>

<div id="container">
	<div id="canvasContainer">
		<canvas id="backgroundCanvas" width="800" height="500"></canvas>
		<canvas id="foregroundCanvas" width="800" height="500"></canvas>
	</div>
	<div id="iconBar">
		<img id="deskIcon" src="images/PET.svg" draggable="true">
		<button class="btn btn-danger" id="removeAllImg">Remove All</button>
		<button class="btn btn-danger" id="save">Save</button>
	</div>
</div>

<div id="dialog" style="display:none; position: absolute; background-color: white; border: 1px solid black; padding: 10px; z-index: 3;">
	<input type="text" id="renameInput" placeholder="Enter new name">
	<button id="renameSubmitBtn">Rename</button>
	<button id="deleteBtn">Delete</button>
	<button id="rotateBtn">Rotate</button>
</div>

<script>
	const fgCanvas = document.getElementById('foregroundCanvas');
	const fgCtx = fgCanvas.getContext('2d');
	const bgCanvas = document.getElementById("backgroundCanvas");
	const bgCtx = bgCanvas.getContext("2d");
	const deskIcon = document.getElementById('deskIcon');
	const dialog = document.getElementById('dialog');
	const renameInput = document.getElementById('renameInput');
	let objects = []; // Array to store placed objects
	let selectedObject = null;

	// Initialize background
	bgCtx.fillStyle = "lightgray";
	bgCtx.fillRect(0, 0, bgCanvas.width, bgCanvas.height);

	// Draw predefined blue rectangles
	const blueRect1 = { x: 20, y: 50, width: 350, height: 400 };
	const blueRect2 = { x: 400, y: 150, width: 380, height: 240 };
	bgCtx.fillStyle = "#255ECF";
	bgCtx.fillRect(blueRect1.x, blueRect1.y, blueRect1.width, blueRect1.height);
	bgCtx.fillRect(blueRect2.x, blueRect2.y, blueRect2.width, blueRect2.height);

	// Drag and drop functionality
	deskIcon.addEventListener('dragstart', (e) => {
		e.dataTransfer.setData('text/plain', e.target.id);
	});

	fgCanvas.addEventListener('dragover', (e) => e.preventDefault());

	fgCanvas.addEventListener('drop', (e) => {
		e.preventDefault();
		const id = e.dataTransfer.getData('text/plain');
		const img = document.getElementById(id);
		const x = e.offsetX - 40;
		const y = e.offsetY - 40;

		const newRect = { x, y, width: 80, height: 80, img, name: '', angle: 0 };
		if (isValidPlacement(newRect, blueRect1, blueRect2)) {
			objects.push(newRect);
			redrawCanvas();
		} else {
			alert("Can't put it here.");
		}
	});

	// Event listeners for editing objects
	fgCanvas.addEventListener('click', (e) => {
		const x = e.offsetX, y = e.offsetY;
		selectedObject = objects.find(obj =>
			x >= obj.x && x <= obj.x + obj.width && y >= obj.y && y <= obj.y + obj.height
		);

		if (selectedObject) {
			dialog.style.display = 'block';
			dialog.style.left = `${e.pageX}px`;
			dialog.style.top = `${e.pageY}px`;
			renameInput.value = selectedObject.name;
		} else {
			dialog.style.display = 'none';
		}
	});

	document.getElementById('deleteBtn').addEventListener('click', () => {
		if (selectedObject) {
			objects = objects.filter(obj => obj !== selectedObject);
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('rotateBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.angle = (selectedObject.angle + 90) % 360;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('renameSubmitBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.name = renameInput.value;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('removeAllImg').addEventListener('click', () => {
		objects = [];
		redrawCanvas();
	});

	// Helper functions
	function isValidPlacement(rect, rect1, rect2) {
		return isWithinBlueRect(rect, rect1) || isWithinBlueRect(rect, rect2);
	}

	function isWithinBlueRect(rect, blueRect) {
		return rect.x >= blueRect.x &&
			rect.x + rect.width <= blueRect.x + blueRect.width &&
			rect.y >= blueRect.y &&
			rect.y + rect.height <= blueRect.y + blueRect.height;
	}

	function redrawCanvas() {
		fgCtx.clearRect(0, 0, fgCanvas.width, fgCanvas.height);
		objects.forEach(obj => {
			fgCtx.save();
			fgCtx.translate(obj.x + obj.width / 2, obj.y + obj.height / 2);
			fgCtx.rotate((obj.angle || 0) * Math.PI / 180);
			fgCtx.drawImage(obj.img, -obj.width / 2, -obj.height / 2, obj.width, obj.height);
			fgCtx.restore();
			if (obj.name) {
				fgCtx.fillStyle = 'black';
				fgCtx.fillText(obj.name, obj.x, obj.y + obj.height + 10);
			}
		});
	}

	// Save and load data

	function saveCanvasData() {
		const bgCanvasData = bgCanvas.toDataURL();
		const fgCanvasData = JSON.stringify(objects);

		console.log('Saving canvas data...');
		console.log('Background Canvas Data:', bgCanvasData);
		console.log('Foreground Canvas Data:', fgCanvasData);

		fetch('/OfficesPlan?handler=SaveData', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ BgCanvasData: bgCanvasData, FgCanvasData: fgCanvasData })
		})
			.then(response => {
				console.log('Response received:', response);
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				return response.json();
			})
			.then(data => {
				console.log('Success:', data);
				alert(data.success ? 'Data saved successfully!' : 'Save failed!');
			})
			.catch(error => {
				console.error('Error:', error);
				alert('An error occurred while saving data.');
			});
	}

	document.getElementById('save').addEventListener('click', saveCanvasData);
 

    function loadSaveData() {
					fetch('/OfficesPlan?handler=SavedData')
						.then(response => {
							if (!response.ok) {
								throw new Error(`HTTP error! status: ${response.status}`);
							}
							return response.json();
						})
						.then(data => {
							if (data.BgCanvasData) {
								const img = new Image();
								img.onload = () => bgCtx.drawImage(img, 0, 0);
								img.src = data.BgCanvasData;
							}
							if (data.FgCanvasData) {
								objects = JSON.parse(data.FgCanvasData);
								redrawCanvas();
							}
						})
						.catch(error => {
							console.error('Error:', error);
							alert('An error occurred while loading data.');
						});
    }

	document.getElementById('save').addEventListener('click', saveCanvasData);
</script>
