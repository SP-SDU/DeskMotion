@page
@model DeskMotion.Pages.OfficesPlanModel
@{
	ViewData["Title"] = "Office Plan";
}

<head>
	<style>
		#container {
			display: flex;
			flex-wrap: wrap;
			margin-top: 2rem;
			justify-content: center;
			background-color: #555a7a;
			color: #52f700;
			border-color: black;
			border-width: 30px;
			border-style: solid;
			border-radius: 10px;
		}

		#canvasContainer {
			position: relative;
			display: flex;
			width: 800px;
			height: 500px;
		}

		canvas {
			position: absolute;
			left: 0;
			top: 0;
		}

		#backgroundCanvas {
			z-index: 1;
			border-color: black;
			border-width: 2px;
			border-style: solid;
			border-radius: 10px;
		}

		#foregroundCanvas {
			z-index: 2;
		}

		#iconBar {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			width: 100px;
			margin-left: 10px;
		}

			#iconBar img {
				width: 100%;
				height: 100%;
                font: 500 18px sans-serif;
			}

		#dialog {
			display: none;
			position: absolute;
			background-color: white;
			border: 1px solid black;
			padding: 10px;
			z-index: 3;
		}

		@@media (max-width: 500px) {
			#container {
				flex-direction: column;
			}
		}
	</style>
</head>

<div id="container">
	<div id="canvasContainer">
		<canvas id="backgroundCanvas" width="800" height="500"></canvas>
		<canvas id="foregroundCanvas" width="800" height="500"></canvas>
	</div>
	<div id="iconBar">
		<img id="deskIcon" src="images/PET.svg" draggable="true">
		<form id="saveForm" method="post">
			<input type="hidden" id="BgCanvasDataInput" name="OfficesPlan.BgCanvasData" />
			<input type="hidden" id="FgCanvasDataInput" name="OfficesPlan.FgCanvasData" />
			<button type="submit" class="btn btn-danger">Save</button>
		</form>
		<button class="btn btn-danger" id="removeAllImg">Remove All</button>
	</div>
</div>

<div id="dialog">
	<input type="text" id="renameInput" placeholder="Enter new name">
	<button id="renameSubmitBtn">Rename</button>
	<button id="deleteBtn">Delete</button>
	<button id="rotateBtn">Rotate</button>
</div>

<script>
	const fgCanvas = document.getElementById('foregroundCanvas');
	const fgCtx = fgCanvas.getContext('2d');
	const bgCanvas = document.getElementById("backgroundCanvas");
	const bgCtx = bgCanvas.getContext("2d");
	const deskIcon = document.getElementById('deskIcon');
	const dialog = document.getElementById('dialog');
	const renameInput = document.getElementById('renameInput');
	let objects = []; // Array to store placed objects
	let selectedObject = null;

	// Initialize background
	bgCtx.fillStyle = "lightgray";
	bgCtx.fillRect(0, 0, bgCanvas.width, bgCanvas.height);

	// Draw predefined blue rectangles
	const blueRect1 = { x: 20, y: 50, width: 350, height: 400 };
	const blueRect2 = { x: 400, y: 150, width: 380, height: 240 };
	bgCtx.fillStyle = "#255ECF";
	bgCtx.fillRect(blueRect1.x, blueRect1.y, blueRect1.width, blueRect1.height);
	bgCtx.fillRect(blueRect2.x, blueRect2.y, blueRect2.width, blueRect2.height);

	// Drag and drop functionality
	deskIcon.addEventListener('dragstart', (e) => {
		e.dataTransfer.setData('text/plain', e.target.id);
	});

	fgCanvas.addEventListener('dragover', (e) => e.preventDefault());

	fgCanvas.addEventListener('drop', (e) => {
		e.preventDefault();
		const id = e.dataTransfer.getData('text/plain');
		const img = document.getElementById(id);
		const x = e.offsetX - 40;
		const y = e.offsetY - 40;

		const newRect = {
			x,
			y,
			width: 80,
			height: 80,
			img: img.src, // Store the image source URL
			name: '',
			angle: 0
		};

		// Collision detection
		let collision = false;
		for (const obj of objects) {
			if (checkCollision(newRect, obj)) {
				collision = true;
				break;
			}
		}

		if (
			!collision &&
			x >= 0 &&
			x + newRect.width <= fgCanvas.width &&
			y >= 0 &&
			y + newRect.height <= fgCanvas.height &&
			(isWithinBlueRect(newRect, blueRect1) || isWithinBlueRect(newRect, blueRect2))
		) {
			objects.push(newRect);
			redrawCanvas();
		} else {
			alert("Can't put it here");
		}
	});

	// Helper function to check collision
	function checkCollision(rect1, rect2) {
		return !(
			rect1.x + rect1.width <= rect2.x ||
			rect1.x >= rect2.x + rect2.width ||
			rect1.y + rect1.height <= rect2.y ||
			rect1.y >= rect2.y + rect2.height
		);
	}

	// Helper function to verify if a rectangle is within blue rectangles
	function isWithinBlueRect(rect, blueRect) {
		return (
			rect.x >= blueRect.x &&
			rect.x + rect.width <= blueRect.x + blueRect.width &&
			rect.y >= blueRect.y &&
			rect.y + rect.height <= blueRect.y + blueRect.height
		);
	}

	fgCanvas.addEventListener('click', (e) => {
		const x = e.offsetX, y = e.offsetY;
		selectedObject = objects.find(obj =>
			x >= obj.x && x <= obj.x + obj.width && y >= obj.y && y <= obj.y + obj.height
		);

		if (selectedObject) {
			dialog.style.display = 'block';
			dialog.style.left = `${e.pageX}px`;
			dialog.style.top = `${e.pageY}px`;
			renameInput.value = selectedObject.name;
		} else {
			dialog.style.display = 'none';
		}
	});

	document.getElementById('renameSubmitBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.name = renameInput.value;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('deleteBtn').addEventListener('click', () => {
		if (selectedObject) {
			objects = objects.filter(obj => obj !== selectedObject);
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('rotateBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.angle = (selectedObject.angle + 90) % 360;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('removeAllImg').addEventListener('click', () => {
		objects = [];
		redrawCanvas();
	});

	function redrawCanvas() {
		fgCtx.clearRect(0, 0, fgCanvas.width, fgCanvas.height);
		objects.forEach(obj => {
			const img = new Image();
			img.onload = () => {
				fgCtx.save();
				fgCtx.translate(obj.x + obj.width / 2, obj.y + obj.height / 2);
				fgCtx.rotate((obj.angle || 0) * Math.PI / 180);
				fgCtx.drawImage(img, -obj.width / 2, -obj.height / 2, obj.width, obj.height);
				fgCtx.restore();
				if (obj.name) {
					fgCtx.fillStyle = 'black';
					fgCtx.fillText(obj.name, obj.x, obj.y + obj.height + 10);
				}
			};
			img.src = obj.img;
		});
	}

	// Populate canvas data on page load
	window.onload = () => {
		const bgCanvasData = `@Html.Raw(Model.OfficesPlan.BgCanvasData)`;
		const fgCanvasData = `@Html.Raw(Model.OfficesPlan.FgCanvasData)`;

		// Load background canvas
		if (bgCanvasData) {
			const img = new Image();
			img.onload = () => bgCtx.drawImage(img, 0, 0);
			img.src = bgCanvasData;
		}

		// Load foreground canvas
		if (fgCanvasData) {
			try {
				objects = JSON.parse(fgCanvasData);
				redrawCanvas();
			} catch (err) {
				console.error("Error parsing FgCanvasData:", err);
			}
		}
	};

	// Update hidden inputs on form submit
	document.getElementById('saveForm').addEventListener('submit', () => {
		document.getElementById('BgCanvasDataInput').value = bgCanvas.toDataURL();
		document.getElementById('FgCanvasDataInput').value = JSON.stringify(objects);
	});
</script>
