@page
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model DeskMotion.Pages.OfficesPlanModel
@{
	ViewData["Title"] = "Office Plan";
	var user = await UserManager.GetUserAsync(User);
	var isAdmin = user != null && await UserManager.IsInRoleAsync(user, "Administrator");
}

<style>
	p {
		text-align: center;
		font: 25px bold;
		margin-bottom: 0;
	}

	#container {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		margin-top: 1rem;
		justify-content: center;
		align-items: center;
		background-color: #434343;
		border-color: black;
		border-width: 5px;
		border-style: solid;
		border-radius: 10px;
		gap: 10px;
	}

	.row {
		flex: 1 1;
		padding: 10px;
	}

	#canvasContainer {
		position: relative;
		display: flex;
		width: 800px;
		height: 500px;
	}

	canvas {
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
	}

	#backgroundCanvas {
		z-index: 1;
		border-color: black;
		border-width: 2px;
		border-style: solid;
		border-radius: 10px;
	}

	#foregroundCanvas {
		z-index: 2;
	}

	#iconBar {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		text-align: center;
		width: 100px;
		margin-left: 20px;
	}

		#iconBar label {
			margin-bottom: 10px;
			font-size: 16px;
		}

		#iconBar img {
			width: 100%;
			height: 80px;
		}

		#iconBar a {
			margin: 2px;
		}

	#OfficeNameDisplay {
		outline: 1px solid white;
		border-color: aliceblue;
		border-radius: 5px;
		text-align: center;
	}

	#dialog {
		display: none;
		width: 160px;
		position: absolute;
		background-color: white;
		border: 1px solid gray;
		padding: 10px;
		z-index: 3;
		flex-direction: column;
		border-radius: 10px;
		text-align: center;
	}

		#dialog select,
		#dialog button {
			margin: 5px 0;
			width: 100%;
			border-radius: 5px;
		}

		#dialog button {
			background-color: darkgreen;
			color: white;
		}
</style>

<head>
@*     <link rel="stylesheet" href="~/css/officesPlan.css"> *@
@* 	<script>
		const isAdmin = @isAdmin.ToString().ToLower();
		const fgCanvasData = `@Html.Raw(Model.OfficesPlan.FgCanvasData)`;
		const bgCanvasData = `@Html.Raw(Model.OfficesPlan.BgCanvasData)`;
	</script>
	<script src="~/js/officesPlan.js" defer></script> *@
</head>

@if (!isAdmin)
{
	<p>You need administrative access to edit this page.</p>
}
<div id="container">
    <div id="canvasContainer">
        <canvas id="backgroundCanvas" width="800" height="500"></canvas>
        <canvas id="foregroundCanvas" width="800" height="500"></canvas>
    </div>
    <div id="iconBar">
		<label id="OfficeName">Plan Name</label>
        <h2 id="OfficeNameDisplay" contenteditable="@(isAdmin ? "true" : "false")">@Model.OfficesPlan.OfficeName</h2>
		<img id="deskIcon" src="images/PET.svg" draggable="@(isAdmin ? "true" : "false")">
        <label id="totalDesksLabel">Total Desks: 0</label>
		<form method="post" onsubmit="handleFormSubmit(event)">
            <input type="hidden" id="BgCanvasDataInput" name="OfficesPlan.BgCanvasData" />
            <input type="hidden" id="FgCanvasDataInput" name="OfficesPlan.FgCanvasData" />
            <input type="hidden" id="OfficeNameInput" name="OfficesPlan.OfficeName" />
            <input type="hidden" id="TotalDesksInput" name="OfficesPlan.TotalDesks" />
			<button type="submit" class="btn btn-primary action-link" style="display:@(isAdmin ? "" : "none")">
				<span class="button-back">Save</span></button>
        </form>
		<button id="removeAllImg" class="btn btn-primary action-link" style="display:@(isAdmin ? "" : "none")">
			<span class="button-back">Remove</span></button>
		<a class="btn btn-primary action-link" href="@(isAdmin ? Url.Page("/Admin/Index") : Url.Page("/Index"))">
			<span class="button-back">Home</span></a>
    </div>
</div>

<div id="dialog">
    <select id="macAddressSelect" >
        <option value="">Select MAC Address</option>
        @foreach (var mac in Model.AvailableMacAddresses)
        {
            <option value="@mac">@mac</option>
        }
    </select>
    <button id="assignBtn">Assign MAC</button>
    <button id="deleteBtn">Delete</button>
    <button id="rotateBtn">Rotate</button>
</div>

<script>
    const fgCanvas = document.getElementById('foregroundCanvas');
    const fgCtx = fgCanvas.getContext('2d');
    const bgCanvas = document.getElementById("backgroundCanvas");
    const bgCtx = bgCanvas.getContext("2d");
    const deskIcon = document.getElementById('deskIcon');
    const dialog = document.getElementById('dialog');
    const macAddressSelect = document.getElementById('macAddressSelect');
    const officeNameDisplay = document.getElementById("OfficeNameDisplay");
	const isAdmin = @isAdmin.ToString().ToLower();
    let objects = [];
    let selectedObject = null;

    // Initialize canvas background
    bgCtx.fillStyle = "lightgray";
    bgCtx.fillRect(0, 0, bgCanvas.width, bgCanvas.height);

    const blueRect1 = { x: 20, y: 50, width: 350, height: 400 };
    const blueRect2 = { x: 400, y: 150, width: 380, height: 240 };
    bgCtx.fillStyle = "#255ECF";
    bgCtx.fillRect(blueRect1.x, blueRect1.y, blueRect1.width, blueRect1.height);
    bgCtx.fillRect(blueRect2.x, blueRect2.y, blueRect2.width, blueRect2.height);

    // Drag and drop functionality
    deskIcon.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', e.target.id);
    });

    fgCanvas.addEventListener('dragover', (e) => e.preventDefault());

    fgCanvas.addEventListener('drop', (e) => {
        e.preventDefault();
        const id = e.dataTransfer.getData('text/plain');
        const img = document.getElementById(id);
        const x = e.offsetX - 40;
        const y = e.offsetY - 40;

        const newRect = { x, y, width: 80, height: 80, img: img.src, macAddress: "", angle: 0 };

        if (isValidPlacement(newRect)) {
            objects.push(newRect);
            redrawCanvas();
        } else {
            alert("Cannot place here!");
        }
    });

    function isValidPlacement(rect) {
        return rect.x >= 0 && rect.x + rect.width <= fgCanvas.width &&
            rect.y >= 0 && rect.y + rect.height <= fgCanvas.height &&
            (isWithinBlueRect(rect, blueRect1) || isWithinBlueRect(rect, blueRect2));
    }

    function isWithinBlueRect(rect, blueRect) {
        return rect.x >= blueRect.x && rect.x + rect.width <= blueRect.x + blueRect.width &&
            rect.y >= blueRect.y && rect.y + rect.height <= blueRect.y + blueRect.height;
    }

    // Open dialog for selected desk
    fgCanvas.addEventListener('click', (e) => {
        const x = e.offsetX, y = e.offsetY;
        selectedObject = objects.find(obj => x >= obj.x && x <= obj.x + obj.width && y >= obj.y && y <= obj.y + obj.height);

		if (selectedObject && isAdmin) {
            dialog.style.display = 'block';
            dialog.style.left = `${e.pageX}px`;
            dialog.style.top = `${e.pageY}px`;
            macAddressSelect.value = selectedObject.macAddress || "";
        } else {
            dialog.style.display = 'none';
        }
    });

    // Assign MacAddress to selected desk
	document.getElementById('assignBtn').addEventListener('click', () => {
	if (selectedObject) {
		const selectedMac = macAddressSelect.value;

		if (!selectedMac) {
			alert("Please select a MAC address.");
			return;
		}

		// Return the previously assigned MacAddress to the dropdown (if any)
		if (selectedObject.macAddress) {
			const previousOption = document.createElement("option");
			previousOption.value = selectedObject.macAddress;
			previousOption.textContent = selectedObject.macAddress;

			// Avoid duplicates by checking if the option already exists
			if (!macAddressSelect.querySelector(`option[value="${selectedObject.macAddress}"]`)) {
				macAddressSelect.appendChild(previousOption);
			}
		}

		// Assign the new MacAddress and remove it from the dropdown
		selectedObject.macAddress = selectedMac;
		macAddressSelect.querySelector(`option[value="${selectedMac}"]`).remove();

		redrawCanvas();
		dialog.style.display = "none";
	}});

    // Delete selected desk
	document.getElementById('deleteBtn').addEventListener('click', () => {
		if (selectedObject) {
			if (selectedObject.macAddress) {
				const option = document.createElement("option");
				option.value = selectedObject.macAddress;
				option.textContent = selectedObject.macAddress;

				// Avoid duplicates by checking if the option already exists
				if (!macAddressSelect.querySelector(`option[value="${selectedObject.macAddress}"]`)) {
					macAddressSelect.appendChild(option);
				}
			}

			objects = objects.filter(obj => obj !== selectedObject);
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

    // Rotate selected desk
    document.getElementById('rotateBtn').addEventListener('click', () => {
        if (selectedObject) {
            selectedObject.angle = (selectedObject.angle + 90) % 360;
            redrawCanvas();
            dialog.style.display = 'none';
        }
    });

    // Update Total Desks
    function updateTotalDesks() {
        const totalDesksLabel = document.getElementById("totalDesksLabel");
        totalDesksLabel.textContent = `Total Desks: ${objects.length}`;
    }

	// Remove all desks
	document.getElementById('removeAllImg').addEventListener('click', () => {
		objects.forEach(obj => {
			if (obj.macAddress) {
				const option = document.createElement("option");
				option.value = obj.macAddress;
				option.textContent = obj.macAddress;

				// Avoid duplicates by checking if the option already exists
				if (!macAddressSelect.querySelector(`option[value="${obj.macAddress}"]`)) {
					macAddressSelect.appendChild(option);
				}
			}
		});

		objects = [];
		redrawCanvas();
		dialog.style.display = 'none';
	});

    // Redraw canvas
    function redrawCanvas() {
        fgCtx.clearRect(0, 0, fgCanvas.width, fgCanvas.height);
        objects.forEach(obj => {
            const img = new Image();
            img.onload = () => {
                fgCtx.save();
                fgCtx.translate(obj.x + obj.width / 2, obj.y + obj.height / 2);
                fgCtx.rotate(obj.angle * Math.PI / 180);
                fgCtx.drawImage(img, -obj.width / 2, -obj.height / 2, obj.width, obj.height);
                fgCtx.restore();
                if (obj.macAddress) {
                    fgCtx.fillStyle = 'white';
                    fgCtx.font = 'bold 13px Arial';
                    fgCtx.fillText(obj.macAddress, obj.x - 8, obj.y + obj.height + 8);
                }
            };
            img.src = obj.img;
        });
        updateTotalDesks();
    }

    // Save form
	function handleFormSubmit(event) {
			event.preventDefault();
			const form = event.target;

			// Set the hidden inputs
			document.getElementById('BgCanvasDataInput').value = bgCanvas.toDataURL();
			document.getElementById('FgCanvasDataInput').value = JSON.stringify(objects);
			document.getElementById('OfficeNameInput').value = officeNameDisplay.textContent.trim();

			// Create a FormData object from the form
			const formData = new FormData(form);

			// Send the form data using fetch
			fetch(form.action, {
				method: 'POST',
				body: formData
			}).then(response => {
				if (response.ok) {
					// Redirect to the same page to avoid form resubmission
					window.location.href = window.location.href;
				} else {
					console.error('Form submission failed:', response.statusText);
				}
			}).catch(error => {
				console.error('Form submission error:', error);
			});
		}

    // Page load
    window.onload = () => {
        const bgCanvasData = `@Html.Raw(Model.OfficesPlan.BgCanvasData)`;
        const fgCanvasData = `@Html.Raw(Model.OfficesPlan.FgCanvasData)`;

        if (bgCanvasData) {
            const img = new Image();
            img.onload = () => bgCtx.drawImage(img, 0, 0);
            img.src = bgCanvasData;
        }

        if (fgCanvasData) {
            try {
                objects = JSON.parse(fgCanvasData);
                const usedMacs = objects.map(obj => obj.macAddress).filter(mac => mac);
                usedMacs.forEach(mac => {
                    macAddressSelect.querySelector(`option[value="${mac}"]`)?.remove();
                });
                redrawCanvas();
            } catch (err) {
                console.error("Error parsing FgCanvasData:", err);
            }
        }
        updateTotalDesks();
    };

</script>
