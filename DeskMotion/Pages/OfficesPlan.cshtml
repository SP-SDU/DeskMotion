@page
@model DeskMotion.Pages.OfficesPlanModel
@{
	ViewData["Title"] = "Office Plan";
}
<head>
	<style>
		#container {
			display: flex;
			flex-wrap: wrap;
			margin-top: 2rem;
			justify-content: center;
			background-color: #555a7a;
			color: #52f700;
			border-color: black;
			border-width: 30px;
			border-style: solid;
			border-radius: 10px;
		}

		#canvasContainer {
			position: relative;
			display: flex;
			width: 800px;
			height: 500px;
		}

		canvas {
			position: absolute;
			left: 0;
			top: 0;
		}

		#backgroundCanvas {
			z-index: 1;
			border-color: black;
			border-width: 2px;
			border-style: solid;
			border-radius: 10px;
		}

		#foregroundCanvas {
			z-index: 2;
		}

		#iconBar {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			width: 100px;
			margin-left: 10px;
		}

			#iconBar img {
				width: 100%;
				height: 100%;
			}

		@@media (max-width: 500px) {
			#container

		{
			flex-direction: column;
		}

		}
	</style>
</head>
<div id ="container">
    <div id="canvasContainer">
        <canvas id="backgroundCanvas" width="800" height="500"></canvas>
        <canvas id="foregroundCanvas" width="800" height="500"></canvas>
    </div>
    <div id="iconBar">
        <img  id="deskIcon" src="images/PET.svg" draggable="true" >
        <button class="btn btn-danger" id="removeAllImg">Remove All</button>
		<button class="btn btn-danger" id="save">Save</button>
    </div>
</div>

<div id="dialog" style="display:none; position: absolute; background-color: white; border: 1px solid black; padding: 10px; z-index: 3;">
	<input type="text" id="renameInput" placeholder="Enter new name">
	<button id="renameSubmitBtn">Rename</button>
	<button id="deleteBtn">Delete</button>
	<button id="rotateBtn">Rotate</button>
</div>

<script>
	const fgCanvas = document.getElementById('foregroundCanvas');
	const fgCtx = fgCanvas.getContext('2d');
	const bgCanvas = document.getElementById("backgroundCanvas");
	const bgCtx = bgCanvas.getContext("2d");
	const deskIcon = document.getElementById('deskIcon');
	const dialog = document.getElementById('dialog');
	const renameInput = document.getElementById('renameInput');
	let objects = []; // Array to store placed objects
	let selectedObject = null;

	// Draw the background rectangle
	bgCtx.fillStyle = "lightgray";
	bgCtx.fillRect(0, 0, bgCanvas.width, bgCanvas.height);

	// Draw rectangles in the background canvas
	const blueRect1 = { x: 20, y: 50, width: 350, height: 400 };
	bgCtx.fillStyle = "#255ECF";
	bgCtx.fillRect(
	blueRect1.x,
	blueRect1.y,
	blueRect1.width,
	blueRect1.height
	);

	const blueRect2 = { x: 400, y: 150, width: 380, height: 240 };
	bgCtx.fillStyle = "#255ECF";
	bgCtx.fillRect(
	blueRect2.x,
	blueRect2.y,
	blueRect2.width,
	blueRect2.height
	);

	deskIcon.addEventListener('dragstart', (e) => {
		e.dataTransfer.setData('text/plain', e.target.id);
	});

	fgCanvas.addEventListener('dragover', (e) => {
		e.preventDefault();
	});

	fgCanvas.addEventListener('drop', (e) => {
		e.preventDefault();
		const id = e.dataTransfer.getData('text/plain');
		const img = document.getElementById(id);
		const x = e.offsetX - 40;
		const y = e.offsetY - 40;

		const newRect = {x: x, y: y, width: 80, height: 80, img: img, name: '', angle: 0};
		let collision = false;
		for (const obj of objects) {
			if (checkCollision(newRect, obj)) {
				collision = true;
				break;
			}
		}
		if (!collision && x >= 0 && x + 70 <= fgCanvas.width && y >= 0 && y + 70 <= fgCanvas.height && (isWithinBlueRect(newRect, blueRect1) ||
			isWithinBlueRect(newRect, blueRect2))) {
			fgCtx.drawImage(img, x, y, 70, 70);
			objects.push(newRect);
		} else {
			alert("Can't put it here");
		}
	});

	fgCanvas.addEventListener('click', (e) => {
		const x = e.offsetX;
		const y = e.offsetY;
		selectedObject = null;
		for (const obj of objects) {
			if (x >= obj.x && x <= obj.x + obj.width && y >= obj.y && y <= obj.y + obj.height) {
				selectedObject = obj;
				break;
			}
		}
		if (selectedObject) {
			dialog.style.display = 'block';
			dialog.style.left = `${e.pageX}px`;
			dialog.style.top = `${e.pageY}px`;
			renameInput.value = selectedObject.name;
		} else {
			dialog.style.display = 'none';
		}
	});

	document.getElementById('deleteBtn').addEventListener('click', () => {
		if (selectedObject) {
			objects = objects.filter(obj => obj !== selectedObject);
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('rotateBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.angle = (selectedObject.angle + 90) % 360;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('renameSubmitBtn').addEventListener('click', () => {
		if (selectedObject) {
			selectedObject.name = renameInput.value;
			redrawCanvas();
			dialog.style.display = 'none';
		}
	});

	document.getElementById('removeAllImg').addEventListener('click', () => {
	objects = [];
	redrawCanvas();
	dialog.style.display = 'none';
	});

	function checkCollision(rect1, rect2) {
		//const rect1Height = rect1.height + 20; 
		//const rect2Height = rect2.height + 20; 
		return !(
			rect1.x + rect1.width < rect2.x ||
			rect1.x > rect2.x + rect2.width ||
			rect1.y + rect1.height < rect2.y ||
			rect1.y > rect2.y + rect2.height
		);
	}

	function isWithinBlueRect(rect, blueRect) {
	// const rectHeight = rect.height + 20;
	// const recty = rect.y - 20
		return (
	rect.x >= blueRect.x &&
	rect.x + rect.width <= blueRect.width + blueRect.x &&
	rect.y >= blueRect.y &&
	rect.y + rect.height <= blueRect.height + blueRect.y
		);
	}

	function redrawCanvas() {
		fgCtx.clearRect(0, 0, fgCanvas.width, fgCanvas.height);
		for (const obj of objects) {
			fgCtx.save();
			fgCtx.translate(obj.x + obj.width / 2, obj.y + obj.height / 2);
			fgCtx.rotate(obj.angle * Math.PI / 180);
			fgCtx.drawImage(obj.img, -obj.width / 2, -obj.height / 2, obj.width, obj.height);
			fgCtx.restore();
			if (obj.name) {
				fgCtx.fillText(obj.name, obj.x, obj.y + obj.height + 10);
			}
		}
	}


	// Save canvas data to the server///
	var fgCanvas = new fabric.fgCanvas('foregroundCanvas');
	var bgCanvas = new fabric.bgCanvas('backgroundCanvas');

	function loadSaveData(){
		// Load data from the server
		$.ajax({
			url: '/api/OfficesPlan',
			type: 'GET',
			data: { id: @Model.OfficesPlan.Id },
			success: function(data) {
			if (data) {
				if (data.bgCanvasData) {
					bgCanvas.loadFromJSON(data.bgCanvasData, function() {
						bgCanvas.renderAll();
					});
				}
				if (data.fgCanvasData) {
					fgCanvas.loadFromJSON(data.fgCanvasData, function() {
						fgCanvas.renderAll();
					});
				}
			}
			}
		});
	}

	function saveCanvasData() {
		// Save data to the server
		$.ajax({
			url: '/api/OfficesPlan',
			type: 'POST',
			data: {
			id: @Model.OfficesPlan.Id,
			bgCanvasData: JSON.stringify(bgCanvas.toJSON()),
			fgCanvasData: JSON.stringify(fgCanvas.toJSON())
			},
			success: function() {
			alert('Data saved successfully');
			}
		});
	}

	loadSaveData();
	document.getElementById('save').addEventListener('click', saveCanvasData);

</script>
<script src="https://cdn.jsdelivr.net/npm/fabric@latest/dist/index.min.js"></script>
