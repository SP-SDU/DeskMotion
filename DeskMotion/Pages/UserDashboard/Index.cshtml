@page
@model DeskMotion.Pages.UserDashboard.Index
@{
    ViewData["Title"] = "User Dashboard";
}

<link rel="stylesheet" href="~/css/dashboard.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<div class="dashboard-container">
    <!-- Alert Container -->
    <div id="alertContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>
    
    <!-- Sidebar -->
    <aside class="sidebar">
        <!-- Assigned Desks Section -->
        <div class="sidebar-section">
            <h2>Assigned Desks</h2>
            @{
                var assignedDesks = Model.Desks?.Where(d => d.IsAssigned).ToList();
            }
            <div id="assignedDesks">
                @if (assignedDesks != null && assignedDesks.Any())
                {
                    <ul class="desk-list" id="assignedDeskList">
                        @foreach (var desk in assignedDesks)
                        {
                            <li class="desk-list-item" data-desk-id="@desk.Id">
                                <div class="desk-name">@desk.Name</div>
                                <div class="desk-status">
                                    <i class="fa-solid fa-circle @(desk.IsActive ? "text-success" : "text-secondary")"></i>
                                    <span>@(desk.IsActive ? "Active" : "Inactive")</span>
                                </div>
                                @if (desk.CurrentHeight.HasValue)
                                {
                                    <div class="desk-status">
                                        <i class="fa-solid fa-arrows-up-down"></i>
                                        <span>Current Height: @desk.CurrentHeight.Value.ToString("F1") cm</span>
                                    </div>
                                }
                                <div class="desk-status">
                                    <i class="fa-solid fa-clock"></i>
                                    <span>Since: @desk.AssignmentStart?.ToLocalTime().ToString("MMM dd, HH:mm")</span>
                                </div>
                                <button class="btn btn-sm btn-danger mt-2" onclick="unassignDesk('@desk.Id')">
                                    <i class="fa-solid fa-times"></i>
                                    <span>Release Desk</span>
                                </button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="no-desks-message">
                        No assigned desks yet. Select desk below.
                    </div>
                }
            </div>
        </div>

        <!-- Available Desks Section -->
        <div class="sidebar-section">
            <h2>Available Desks</h2>
            @{
                var availableDesks = Model.Desks?.Where(d => !d.IsAssigned).ToList();
            }
            <div id="availableDesks">
                @if (availableDesks != null && availableDesks.Any())
                {
                    <ul class="desk-list" id="availableDeskList">
                        @foreach (var desk in availableDesks)
                        {
                            <li class="desk-list-item" data-desk-id="@desk.Id">
                                <div class="desk-name">@desk.Name</div>
                                <div class="desk-status">
                                    <i class="fa-solid fa-circle text-success"></i>
                                    <span>Available</span>
                                </div>
                                <button class="btn btn-sm btn-primary assign-desk-btn" data-desk-id="@desk.Id">
                                    <i class="fa-solid fa-plus"></i>
                                    <span>Assign to Me</span>
                                </button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="no-desks-message">
                        No available desks at the moment.
                    </div>
                }
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@ViewData["Title"]</h1>
            <div class="btn-group">
                <button id="refreshStats" class="btn btn-outline-primary" aria-label="Refresh statistics">
                    <i class="fa-solid fa-sync"></i><span class="ms-2">Refresh</span>
                </button>
                <button id="toggleCharts" class="btn btn-outline-secondary" aria-label="Toggle chart view">
                    <i class="fa-solid fa-chart-line"></i><span class="ms-2">Toggle Charts</span>
                </button>
            </div>
        </div>

        <div id="alertContainer" role="alert" aria-live="polite"></div>

        <!-- Statistics and Charts Section -->
        <div class="row mb-4">
            <div class="col">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fa-solid fa-calendar"></i>
                    </span>
                    <input type="date" id="startDate" class="form-control" />
                    <input type="date" id="endDate" class="form-control" />
                    <button id="applyDateFilter" class="btn btn-primary">
                        <i class="fa-solid fa-filter"></i><span class="ms-2">Apply Filter</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Charts Container -->
        <div id="chartsContainer">
            <div class="chart-container mb-4">
                <canvas id="heightDistributionChart"></canvas>
            </div>
            <div class="chart-container">
                <canvas id="adjustmentTimelineChart"></canvas>
            </div>
        </div>
    </main>
</div>

<script id="initialData" type="application/json">
    @Json.Serialize(Model.Desks)
</script>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="~/js/dashboard.js"></script>
}
