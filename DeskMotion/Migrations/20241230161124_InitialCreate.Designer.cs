// <auto-generated />
using System;
using DeskMotion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeskMotion.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:DeskMotion/Migrations/20241230161124_InitialCreate.Designer.cs
    [Migration("20241230161124_InitialCreate")]
========
    [Migration("20241221142044_InitialCreate")]
>>>>>>>> origin/feature/dashboard-chart-improvements:DeskMotion/Migrations/20241221142044_InitialCreate.Designer.cs
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeskMotion.Models.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Desks");
                });

            modelBuilder.Entity("DeskMotion.Models.DeskMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("text");

<<<<<<<< HEAD:DeskMotion/Migrations/20241230161124_InitialCreate.Designer.cs
                    b.Property<Guid?>("OfficesPlanId")
========
                    b.Property<Guid?>("OwnerId")
>>>>>>>> origin/feature/dashboard-chart-improvements:DeskMotion/Migrations/20241221142044_InitialCreate.Designer.cs
                        .HasColumnType("uuid");

                    b.Property<string>("QRCodeData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

<<<<<<<< HEAD:DeskMotion/Migrations/20241230161124_InitialCreate.Designer.cs
                    b.HasIndex("OfficesPlanId");
========
                    b.HasIndex("OwnerId");
>>>>>>>> origin/feature/dashboard-chart-improvements:DeskMotion/Migrations/20241221142044_InitialCreate.Designer.cs

                    b.ToTable("DeskMetadata");
                });

            modelBuilder.Entity("DeskMotion.Models.InitialData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InitialData");
                });

            modelBuilder.Entity("DeskMotion.Models.IssueReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("IssueReports");
                });

            modelBuilder.Entity("DeskMotion.Models.OfficesPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BgCanvasData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FgCanvasData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalDesks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OfficesPlan");
                });

            modelBuilder.Entity("DeskMotion.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeskMetadataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DeskMotion.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DeskMotion.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DeskMotion.Models.Desk", b =>
                {
                    b.OwnsOne("DeskMotion.Models.Config", "Config", b1 =>
                        {
                            b1.Property<Guid>("DeskId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Manufacturer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DeskId");

                            b1.ToTable("Desks");

                            b1.WithOwner()
                                .HasForeignKey("DeskId");
                        });

                    b.OwnsMany("DeskMotion.Models.LastError", "LastErrors", b1 =>
                        {
                            b1.Property<Guid>("DeskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ErrorCode")
                                .HasColumnType("integer");

                            b1.Property<int>("Time_s")
                                .HasColumnType("integer");

                            b1.HasKey("DeskId", "Id");

                            b1.ToTable("LastError");

                            b1.WithOwner()
                                .HasForeignKey("DeskId");
                        });

                    b.OwnsOne("DeskMotion.Models.State", "State", b1 =>
                        {
                            b1.Property<Guid>("DeskId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsAntiCollision")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsOverloadProtectionDown")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsOverloadProtectionUp")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPositionLost")
                                .HasColumnType("boolean");

                            b1.Property<int>("Position_mm")
                                .HasColumnType("integer");

                            b1.Property<int>("Speed_mms")
                                .HasColumnType("integer");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DeskId");

                            b1.ToTable("Desks");

                            b1.WithOwner()
                                .HasForeignKey("DeskId");
                        });

                    b.OwnsOne("DeskMotion.Models.Usage", "Usage", b1 =>
                        {
                            b1.Property<Guid>("DeskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ActivationsCounter")
                                .HasColumnType("integer");

                            b1.Property<int>("SitStandCounter")
                                .HasColumnType("integer");

                            b1.HasKey("DeskId");

                            b1.ToTable("Desks");

                            b1.WithOwner()
                                .HasForeignKey("DeskId");
                        });

                    b.Navigation("Config")
                        .IsRequired();

                    b.Navigation("LastErrors");

                    b.Navigation("State")
                        .IsRequired();

                    b.Navigation("Usage")
                        .IsRequired();
                });

            modelBuilder.Entity("DeskMotion.Models.DeskMetadata", b =>
                {
<<<<<<<< HEAD:DeskMotion/Migrations/20241230161124_InitialCreate.Designer.cs
                    b.HasOne("DeskMotion.Models.OfficesPlan", null)
                        .WithMany("DeskMetadata")
                        .HasForeignKey("OfficesPlanId");
========
                    b.HasOne("DeskMotion.Models.User", "Owner")
                        .WithMany("Desks")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
>>>>>>>> origin/feature/dashboard-chart-improvements:DeskMotion/Migrations/20241221142044_InitialCreate.Designer.cs
                });

            modelBuilder.Entity("DeskMotion.Models.IssueReport", b =>
                {
                    b.OwnsMany("DeskMotion.Models.IssueComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("IssueReportId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Author")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("IssueReportId", "Id");

                            b1.ToTable("IssueComment");

                            b1.WithOwner()
                                .HasForeignKey("IssueReportId");

                            b1.OwnsMany("DeskMotion.Models.IssueAttachment", "Attachments", b2 =>
                                {
                                    b2.Property<Guid>("IssueCommentIssueReportId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("IssueCommentId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<byte[]>("Content")
                                        .IsRequired()
                                        .HasColumnType("bytea");

                                    b2.Property<string>("FileName")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("MimeType")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("IssueCommentIssueReportId", "IssueCommentId", "Id");

                                    b2.ToTable("IssueComment_Attachments");

                                    b2.WithOwner()
                                        .HasForeignKey("IssueCommentIssueReportId", "IssueCommentId");
                                });

                            b1.Navigation("Attachments");
                        });

                    b.OwnsMany("DeskMotion.Models.IssueEvent", "Events", b1 =>
                        {
                            b1.Property<Guid>("IssueReportId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("IssueReportId", "Id");

                            b1.ToTable("IssueEvent");

                            b1.WithOwner()
                                .HasForeignKey("IssueReportId");
                        });

                    b.OwnsMany("DeskMotion.Models.IssueAttachment", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("IssueReportId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MimeType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IssueReportId", "Id");

                            b1.ToTable("IssueReports_Attachments");

                            b1.WithOwner()
                                .HasForeignKey("IssueReportId");
                        });

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DeskMotion.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DeskMotion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DeskMotion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DeskMotion.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeskMotion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DeskMotion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

<<<<<<<< HEAD:DeskMotion/Migrations/20241230161124_InitialCreate.Designer.cs
            modelBuilder.Entity("DeskMotion.Models.OfficesPlan", b =>
                {
                    b.Navigation("DeskMetadata");
========
            modelBuilder.Entity("DeskMotion.Models.User", b =>
                {
                    b.Navigation("Desks");
>>>>>>>> origin/feature/dashboard-chart-improvements:DeskMotion/Migrations/20241221142044_InitialCreate.Designer.cs
                });
#pragma warning restore 612, 618
        }
    }
}
